name: E-commerce Backend CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.node-version.outputs.node-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        id: node-version
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      
      - name: Generate coverage report
        run: npm run test:coverage

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-
      
      - name: Build Docker image
        run: |
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache --tag myapp:${{ github.sha }} --tag myapp:latest .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      
      - name: Push Docker image
        run: |
          docker push myapp:${{ github.sha }}
          docker push myapp:latest

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit
      
      - name: Run Snyk scan
        run: |
          npm install -g snyk
          snyk test --severity-threshold=high

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Deploy to ECS Staging
        run: |
          aws ecs update-service --cluster staging-cluster --service myapp-service --force-new-deployment
          # Poll for deployment status
          for i in {1..10}; do
            STATUS=$(aws ecs describe-services --cluster staging-cluster --services myapp-service --query "services[0].deployments[0].rolloutState" --output text)
            if [[ "$STATUS" == "COMPLETED" ]]; then
              echo "Deployment completed successfully."
              break
            fi
            echo "Waiting for deployment to complete..."
            sleep 30
          done
      
      - name: Run smoke tests
        run: |
          curl -f https://staging.myapp.com/health
          curl -f https://staging.myapp.com/api/status

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Deploy to ECS Production
        run: |
          aws ecs update-service --cluster prod-cluster --service myapp-service --force-new-deployment
          # Poll for deployment status
          for i in {1..10}; do
            STATUS=$(aws ecs describe-services --cluster prod-cluster --services myapp-service --query "services[0].deployments[0].rolloutState" --output text)
            if [[ "$STATUS" == "COMPLETED" ]]; then
              echo "Deployment completed successfully."
              break
            fi
            echo "Waiting for deployment to complete..."
            sleep 30
          done
      
      - name: Run smoke tests
        run: |
          curl -f https://myapp.com/health
          curl -f https://myapp.com/api/status
      
      - name: Notify Slack
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Production deployment completed for commit ${{ github.sha }}"}' ${{ secrets.SLACK_WEBHOOK }}